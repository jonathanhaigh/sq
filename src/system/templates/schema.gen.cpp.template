/* -----------------------------------------------------------------------------
 * Copyright 2021 Jonathan Haigh
 * SPDX-License-Identifier: MIT
 * ---------------------------------------------------------------------------*/

{{
    -- We're going to create four std::arrays to contain the schema data. One
    -- array for each of:
    -- * TypeSchema
    -- * FieldSchema
    -- * ParamSchema
    -- * PrimitiveTypeSchema
    --
    -- In order for parts of the schema data to be able to reference other
    -- parts of the schema data we're going to work out the index for each
    -- schema element within its array before we start writing any data.
    --
    -- param schemas already have "index" members so use "global_index" for the
    -- name of a param's index into the ParamSchema array.

    local type_index_by_name = {}
    local type_index = 0
    local field_index = 0
    local param_index = 0

    for _, type_schema in ipairs(types) do

        type_schema.index = type_index
        type_schema.fields_begin_index = field_index
        type_index_by_name[type_schema.name] = type_index
        type_index = type_index + 1

        for _, field_schema in ipairs(type_schema.fields) do

            field_schema.index = field_index
            field_schema.params_begin_index = param_index
            field_index = field_index + 1

            for _, param_schema in ipairs(field_schema.params) do

                param_schema.global_index = param_index
                param_index = param_index + 1

            end
            field_schema.params_end_index = param_index;
        end
        type_schema.fields_end_index = field_index;
    end

    local noof_types = type_index
    local noof_fields = field_index
    local noof_params = param_index

    local pt_index_by_name = {}
    local pt_index = 0
    for _, pt_schema in ipairs(primitive_types) do
        pt_schema.index = pt_index
        pt_index_by_name[pt_schema.name] = pt_index
        pt_index = pt_index + 1
    end
    local noof_pts = pt_index

    function doc_to_str(doc)
        local str = (type(doc) == "table") and table.concat(doc, "\n") or doc
        return string.format("R\"*DOC*STRING*(%s)*DOC*STRING*\"", str)
    end

    local type_schema_values = {}
    local field_schema_values = {}
    local param_schema_values = {}
    for _, type_schema in ipairs(types) do
        table.insert(type_schema_values, string.format(
            "TypeSchema{%q, %s, %d, %d}",
            type_schema.name,
            doc_to_str(type_schema.doc),
            type_schema.fields_begin_index,
            type_schema.fields_end_index
        ))
        for _, field_schema in ipairs(type_schema.fields) do
            table.insert(field_schema_values, string.format(
                "FieldSchema{%q, %s, %d, %d, %d, %s}",
                field_schema.name,
                doc_to_str(field_schema.doc),
                field_schema.params_begin_index,
                field_schema.params_end_index,
                type_index_by_name[field_schema.return_type],
                tostring(field_schema.return_list)
            ))
            for _, param_schema in ipairs(field_schema.params) do
                table.insert(param_schema_values, string.format(
                    "ParamSchema{%q, %s, %d, %d }",
                    param_schema.name,
                    doc_to_str(param_schema.doc),
                    param_schema.index,
                    pt_index_by_name[param_schema.type]
                ))
            end
        end
    end

    pt_schema_values = {}
    for _, pt_schema in ipairs(primitive_types) do
        table.insert(pt_schema_values, string.format(
            "PrimitiveTypeSchema{ %q, %s }",
            pt_schema.name,
            doc_to_str(pt_schema.doc)
        ))
    end
}}
#include "system/schema.h"

namespace sq::system {
namespace {

constexpr std::array<TypeSchema, {{= noof_types }}> g_types{
    {{= table.concat(type_schema_values, ",\n    ") }}
};

constexpr std::array<FieldSchema, {{= noof_fields }}> g_fields{
    {{= table.concat(field_schema_values, ",\n    ") }}
};

constexpr std::array<ParamSchema, {{= noof_params }}> g_params{
    {{= table.concat(param_schema_values, ",\n    ") }}
};

constexpr std::array<PrimitiveTypeSchema, {{= noof_pts }}> g_pts{
    {{= table.concat(pt_schema_values, ",\n    ") }}
};

inline constexpr std::size_t g_root_type_index = {{= type_index_by_name.SqRoot }};

} // namespace

std::string_view PrimitiveTypeSchema::name() const
{
    return name_;
}

std::string_view PrimitiveTypeSchema::doc() const
{
    return doc_;
}

std::string_view ParamSchema::name() const
{
    return name_;
}

std::string_view ParamSchema::doc() const
{
    return doc_;
}

std::size_t ParamSchema::index() const
{
    return index_;
}

const PrimitiveTypeSchema& ParamSchema::type() const
{
    return g_pts.at(type_index_);
}

std::string_view FieldSchema::name() const
{
    return name_;
}

std::string_view FieldSchema::doc() const
{
    return doc_;
}

gsl::span<const ParamSchema> FieldSchema::params() const
{
    return gsl::span{g_params}.subspan(
        params_begin_index_,
        params_end_index_ - params_begin_index_
    );
}

const TypeSchema& FieldSchema::return_type() const
{
    return g_types.at(return_type_index_);
}

bool FieldSchema::return_list() const
{
    return return_list_;
}

std::string_view TypeSchema::name() const
{
    return name_;
}

std::string_view TypeSchema::doc() const
{
    return doc_;
}

gsl::span<const FieldSchema> TypeSchema::fields() const
{
    return gsl::span{g_fields}.subspan(
        fields_begin_index_,
        fields_end_index_ - fields_begin_index_
    );
}

gsl::span<const TypeSchema> Schema::types() const
{
    return gsl::span{g_types};
}

gsl::span<const PrimitiveTypeSchema> Schema::primitive_types() const
{
    return gsl::span{g_pts};
}

const TypeSchema& Schema::root_type() const
{
    return g_types.at(g_root_type_index);
}

const Schema& schema()
{
    static constexpr Schema ret{};
    return ret;
}

} // namespace sq::system
