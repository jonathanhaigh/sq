#ifndef SQ_INCLUDE_GUARD__{{ sq_type.name }}_gen_inl_h_
#define SQ_INCLUDE_GUARD__{{ sq_type.name }}_gen_inl_h_

#include "common_types/FieldCallParams.h"
#include "common_types/InvalidFieldError.h"

namespace sq::system {

template <typename Impl>
Result {{ sq_type.name }}<Impl>::get(std::string_view member, [[maybe_unused]] const FieldCallParams& params) const
{

{%- macro _get_param_fn(param) -%}

    {{ "get" if param.required else "get_optional" }}

{%- endmacro -%}

{%- macro _get_param(param) -%}

        params.{{ _get_param_fn(param) }}<{{ param.base_type }}>({{ param.index }}, "{{ param.name }}")

{%- endmacro -%}

{% for field in sq_type.fields %}
    if (member.compare("{{ field.name }}") == 0)
    {
        return static_cast<const Impl&>(*this).get_{{ field.name }}(
{%- set sep = joiner(", ") -%}
{% for param in field.params %}{{sep()}}
            {{ _get_param(param) }}
{%- endfor %}
        );
    }
{% endfor %}
    throw InvalidFieldError("{{ sq_type.name }}", member);
    return nullptr;
}

} // namespace sq::system

#endif // SQ_INCLUDE_GUARD__{{ sq_type.name}}_gen_inl_h_
