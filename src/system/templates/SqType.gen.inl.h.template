/* -----------------------------------------------------------------------------
 * Copyright 2021 Jonathan Haigh
 * SPDX-License-Identifier: MIT
 * ---------------------------------------------------------------------------*/
#ifndef SQ_INCLUDE_GUARD__{{= name }}_gen_inl_h_
#define SQ_INCLUDE_GUARD__{{= name }}_gen_inl_h_

#include "core/errors.h"
#include "core/FieldCallParams.h"
#include "core/typeutil.h"

namespace sq::system {

template <typename Impl>
Result {{= name }}<Impl>::dispatch(
    std::string_view member,
    SQ_MU const FieldCallParams& params
) const
{
{{
    -- Convert a value into a string that can be used in C++ code as a literal
    -- value.
    function value_to_cpp_literal(value)
        if type(value) == "string" then
            return string.format("%q", value)
        end
        return tostring(value)
    end

    for _, field in ipairs(fields) do
    param_strs = {}
    for _, param in ipairs(field.params) do
        if param.required or param.default_value == nil then
            table.insert(param_strs, string.format(
                "params.%s<%s>(%d, \"%s\")",
                param.required and "get" or "get_optional",
                param.type,
                param.index,
                param.name
            ))
        else
            table.insert(param_strs, string.format(
                "params.get_or<%s>(%d, \"%s\", %s)",
                param.type,
                param.index,
                param.name,
                value_to_cpp_literal(param.default_value)
            ))
        end
    end
}}
    if (member.compare("{{= field.name }}") == 0)
    {
        return static_cast<const Impl&>(*this).get_{{= field.name }}({{=
            table.concat(param_strs, ", ")
        }});
    }
{{ end }}

    throw InvalidFieldError{"{{= name }}", member};
}

} // namespace sq::system

#endif // SQ_INCLUDE_GUARD__{{= name }}_gen_inl_h_
